/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AnalisadorLexico;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 *
 * @author Math Pedroza
 */
public class FrmTabela extends javax.swing.JFrame {

    /**
     * Creates new form Tabela
     */
    
    
    public FrmTabela() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Analisador Léxico - Tabela de Tokens");
        setExtendedState(6);

        jTable1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "Número", "0, 0.1, 1, 2, 3...1000, 10000", "digito| digito.digito", "Números usados em atribuições, operadores, etc..."},
                { new Integer(2), "Letra", "A, a, b, c, d, D, ….Z", "letra", "Letras do alfabeto para escrita"},
                { new Integer(3), "Relacional", "--, ++, ^=, --^=, ++^=, ^=^", "(--| ++| ^=| --^=| ++^=| ^=^)", "Operadores de operações de igualdade, diferença, maior e menor"},
                { new Integer(4), "opAritmetico", "$, ¢, #, §", "($| ¢| #| §)", "Operadores de adição, subtração, multiplicação e divisão"},
                { new Integer(5), "comentario", "{ & comentário & }", "{ &(letra|dígito) & }", "Usada quando não se deseja que o código em questão apareça para o usuário"},
                { new Integer(6), "Tipos", "INTEGER, INT, CHAR, VARCHAR, DOUBLE, REAL, FLOAT, DATE, DATETIME, ", "letra: letra(dígito) /;  ", "Tipo de atributos int : número inteiros string: caracteres "},
                { new Integer(7), "FinalLinha", "/;", "/;", "final de cada linha, como se fosse vírgula nome: string /; idade: int /; "},
                { new Integer(8), "CriarClasse", "[ -> NOME ] ", "[ -> letra]", "Criar uma Classe"},
                { new Integer(9), "FinalLinhaClasse", ";;;", ";;;", "Ponto que delimita fim de uma função, classe, etc..."},
                { new Integer(10), "Relacionamento", "1&1, 1&M, M&M", "[ Relationship: 1&M /;  letra <- letra /; ", "Relacionar classes criadas"},
                { new Integer(11), "Parâmetros", "(... +parametro, + parametro ...)", "Func => letra (letra|digito letra|dígito) /;", "parâmetros dentro de uma função: exemplo: Nome: string"},
                { new Integer(12), "Retorno", "boolean, void, double, int, float, string", "delete: void /;", "Retorno de uma função"},
                { new Integer(13), "Atributos Visibilidade", "protected, public, private, package", "[ -> letra => letra", "Declarar antes de criar uma classe"},
                { new Integer(14), "AssociaçõesAtributos", "readonly, unique, nonunique, ordered, unordered, autoincrement", "letra : int, autoincrement ", "Atributos especiais, como exemplo, id é sempre autoincrement"},
                { new Integer(15), "Propriedades Operações", "query, guarded", "concurrent [ (letra $ letra) /; (dígito # dígito) /; ", "Exemplo: concurrent é usado para avaliar várias fórmulas ao mesmo tempo"},
                { new Integer(16), "Relacionamentos Classes", "Hierarquia, agregação, generalização", "[ letra <- letra   dígito * letra /; ] ", "Tipos de relacionamento, como exemplo hierarquia, herdando atributos de outra classe"},
                { new Integer(17), "CriarChavesFK", "create_fk(atributo){OpçõesFK}", "ondelete: cascade /; onupdate: cascade  } /; ", "Criando chaves estrangeiras"},
                { new Integer(18), "OpçõesFK", "cascade, restricted, set null, no action", "letra : letra /;", "Opções de chave FK, quando atualizada ou excluída"},
                { new Integer(19), "Multiplicidade", "1,2,3..", "number_relationships: dígito /;", "N° de vezes que uma classe se relaciona"},
                { new Integer(20), "Navegabilidade", "RightToLeft, LeftToRight", "Direction : letra /;", "Direção para onde a relação com outra classe é apontada"},
                { new Integer(21), "CriarRelação", "(nomeTabela1, nomeTabela2) [relacionamento] ", "Class (letra, letra) [ RelationshipType : hierarchy /; ] ", "Cria a relação entre duas tabelas que se relacionam entre si"},
                { new Integer(22), "CriarOp", "(operador: retorno)", "(update : void /;)", "Cria o operador e seu respectivo retorno"},
                { new Integer(23), "Shape", "Rectangular, Square, Circle, ect...", "Format: letra  /;", "Formato que a classe vai ter, normalmente sempre se utiliza o retângulo"},
                { new Integer(24), "Relationship", "Relationship", " Relationship", "Palavra reservada"},
                { new Integer(25), "delete", "delete", "delete", "Palavra reservada"},
                { new Integer(26), "para", "For", "For", "Laço de repetição"},
                { new Integer(27), "enquanto", "While	", "While", "executa uma função enquanto a condição for aceita"},
                { new Integer(28), "Do While", "Do While", "Do While", "Mesmo que o While, mas os comandos são executados pelo menos uma vez"},
                { new Integer(29), "Abre Colchete", "[", "[", "Define Abertura de colchete"},
                { new Integer(30), "Fecha Colchete", "]", "]", "Define fechamento de colchete"},
                { new Integer(31), "Abre Parênteses ", "(", "(", "Define Abertura de parênteses"},
                { new Integer(32), "Fecha Parênteses", ")", ")", "Define fechamento de parênteses"},
                { new Integer(33), "ondelete", "ondelete", "ondelete", "palavra reservada"},
                { new Integer(34), "onupdate", "onupdate", "onupdate", "palavra reservada"},
                { new Integer(35), "Format", "Format", "Format", "palavra reservada"},
                { new Integer(36), "Classe ", "Class ", "Class", "palavra reservada"},
                { new Integer(37), "concurrent ", "concurrent ", "concurrent", "palavra reservada"},
                { new Integer(38), "update", "update", "update", "palavra reservada"},
                { new Integer(39), "Variável", "nota, tam, distância", "“letra*|letra*dígito*", "definir uma variável"},
                { new Integer(40), "Constante", "PI, MAX, RAIO", "#DefineConst *letra = dígito", "definir uma constante"},
                { new Integer(41), "Vírgula", ",", ",", "Separador de parâmetros dentro de uma função"},
                { new Integer(42), "Func", "Func", "Func", "definir uma função"},
                { new Integer(43), "DefineConst", "DefineConst", "D#DefineConst *letra = dígito", "palavra reservada"},
                { new Integer(44), "number_relationships", "number_relationships", "#DefineConst *letra = dígito", "palavra reservada"},
                { new Integer(45), "AbreChaves", "{", "{", "Define abertura de chaves"},
                { new Integer(46), "FechaChaves", "}", "}", "Define fechamento de chaves"},
                { new Integer(48), "Quebra_Linha", "\\q", "\\q", "Quebra de linha"},
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Token", "Lexema", "Expressão Regular", "Descriçaõ do Token"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(25);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(1500);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmTabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmTabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmTabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmTabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmTabela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
