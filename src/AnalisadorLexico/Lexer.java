/* The following code was generated by JFlex 1.4.3 on 11/07/21 12:02 */

package AnalisadorLexico;
import static AnalisadorLexico.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/07/21 12:02 from the specification file
 * <tt>D:/Documentos/NetBeansProjects/Analisador_Diagrama_de_Classes/src/AnalisadorLexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\20\2\0\1\3\22\0\1\113\1\12\4\0\1\17"+
    "\1\0\1\4\1\6\1\14\1\13\1\42\1\5\1\0\1\15\1\110"+
    "\1\103\7\2\1\111\1\47\1\41\1\7\1\11\1\10\2\0\1\26"+
    "\1\34\1\24\1\31\1\36\1\37\1\102\1\25\1\21\2\1\1\35"+
    "\1\40\1\22\1\32\1\74\1\101\1\27\1\72\1\23\1\33\1\30"+
    "\1\71\2\1\1\107\1\43\1\112\1\44\1\0\1\16\1\0\1\52"+
    "\1\70\1\65\1\62\1\50\1\67\1\73\1\60\1\55\1\1\1\76"+
    "\1\51\1\64\1\53\1\56\1\61\1\100\1\63\1\57\1\54\1\66"+
    "\1\75\2\1\1\77\1\106\1\45\1\0\1\46\145\0\1\105\3\0"+
    "\1\104\uff18\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\3\7\1\1\2\5\1\1\1\10\20\2\1\1\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\5\2\1\3\1\1"+
    "\1\17\3\0\1\20\1\21\1\7\1\22\1\23\1\24"+
    "\2\0\1\25\46\0\1\26\13\0\1\27\1\0\1\30"+
    "\1\31\51\0\1\32\1\0\1\33\1\34\3\0\1\35"+
    "\32\0\1\36\5\0\1\30\15\0\1\37\1\0\1\40"+
    "\16\0\1\3\11\0\1\41\31\0\1\42\1\43\6\0"+
    "\1\44\5\0\1\45\1\0\1\46\12\0\1\47\5\0"+
    "\1\50\1\51\1\0\1\52\5\0\1\53\4\0\1\54"+
    "\12\0\1\55\21\0\1\56\1\57\11\0\1\60\11\0"+
    "\1\61\12\0\1\62\1\63\1\64\6\0\1\65\1\66"+
    "\4\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\114\0\u017c\0\114"+
    "\0\u01c8\0\u0214\0\u0260\0\u0214\0\114\0\u02ac\0\u02f8\0\114"+
    "\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558"+
    "\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8"+
    "\0\u0804\0\u0130\0\u0850\0\114\0\114\0\114\0\u089c\0\u08e8"+
    "\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0130\0\u0afc"+
    "\0\u0130\0\u0b48\0\114\0\114\0\114\0\114\0\114\0\u0b94"+
    "\0\u0be0\0\u0c2c\0\114\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8"+
    "\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u1008"+
    "\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268"+
    "\0\u12b4\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8"+
    "\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728"+
    "\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988"+
    "\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\114\0\u1b50\0\114"+
    "\0\114\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u1d64"+
    "\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4"+
    "\0\u2010\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224"+
    "\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u2438\0\u2484"+
    "\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4"+
    "\0\u2730\0\u277c\0\u27c8\0\u2814\0\114\0\114\0\u2860\0\u28ac"+
    "\0\u28f8\0\114\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0"+
    "\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20"+
    "\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80"+
    "\0\u2fcc\0\u3018\0\u3064\0\u30b0\0\u30fc\0\u3148\0\u3194\0\u31e0"+
    "\0\u322c\0\u3278\0\u32c4\0\u3310\0\u335c\0\u33a8\0\u33f4\0\u3440"+
    "\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0"+
    "\0\114\0\u36ec\0\114\0\u3738\0\u3784\0\u37d0\0\u381c\0\u3868"+
    "\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8"+
    "\0\u3b14\0\114\0\u3b60\0\u3bac\0\u3bf8\0\u3c44\0\u3c90\0\u3cdc"+
    "\0\u3d28\0\u3d74\0\u3dc0\0\114\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0"+
    "\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u4104\0\u4150"+
    "\0\u419c\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364\0\u43b0"+
    "\0\u43fc\0\u4448\0\u4494\0\u44e0\0\u452c\0\114\0\114\0\u4578"+
    "\0\u45c4\0\u4610\0\u465c\0\u46a8\0\u46f4\0\114\0\u4740\0\u478c"+
    "\0\u47d8\0\u4824\0\u4870\0\114\0\u48bc\0\114\0\u4908\0\u4954"+
    "\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u4b1c\0\u4b68\0\u4bb4"+
    "\0\114\0\u4c00\0\u4c4c\0\u4c98\0\u4ce4\0\u4d30\0\114\0\114"+
    "\0\u4d7c\0\114\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u4ef8\0\114"+
    "\0\u4f44\0\u4f90\0\u4fdc\0\u5028\0\114\0\u5074\0\u50c0\0\u510c"+
    "\0\u5158\0\u51a4\0\u51f0\0\u523c\0\u5288\0\u52d4\0\u5320\0\114"+
    "\0\u536c\0\u53b8\0\u5404\0\u5450\0\u549c\0\u54e8\0\u5534\0\u5580"+
    "\0\u55cc\0\u5618\0\u5664\0\u56b0\0\u56fc\0\u5748\0\u5794\0\u57e0"+
    "\0\u582c\0\114\0\114\0\u5878\0\u58c4\0\u5910\0\u595c\0\u59a8"+
    "\0\u59f4\0\u5a40\0\u5a8c\0\u5ad8\0\114\0\u5b24\0\u5b70\0\u5bbc"+
    "\0\u5c08\0\u5c54\0\u5ca0\0\u5cec\0\u5d38\0\u5d84\0\114\0\u5dd0"+
    "\0\u5e1c\0\u5e68\0\u5eb4\0\u5f00\0\u5f4c\0\u5f98\0\u5fe4\0\u6030"+
    "\0\u607c\0\114\0\114\0\114\0\u60c8\0\u6114\0\u6160\0\u61ac"+
    "\0\u61f8\0\u6244\0\114\0\114\0\u6290\0\u62dc\0\u6328\0\u6374"+
    "\0\114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\15\1\16\1\2\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\21\3"+
    "\1\50\1\51\1\3\1\52\4\3\1\53\1\54\1\55"+
    "\2\2\2\3\2\4\1\56\1\57\132\0\1\60\77\0"+
    "\1\4\100\0\1\4\4\0\2\4\5\0\1\61\1\62"+
    "\35\0\1\61\50\0\1\61\10\0\1\63\110\0\1\64"+
    "\3\0\1\65\113\0\1\65\112\0\1\66\144\0\1\67"+
    "\71\0\1\70\112\0\1\60\3\0\1\71\30\0\1\72"+
    "\13\0\1\73\42\0\1\60\37\0\1\74\7\0\1\75"+
    "\43\0\1\60\44\0\1\76\46\0\1\60\6\0\1\77"+
    "\23\0\1\100\1\101\2\0\1\102\1\103\4\0\1\104"+
    "\46\0\1\60\36\0\1\105\54\0\1\60\47\0\1\106"+
    "\4\0\1\107\36\0\1\60\17\0\1\110\11\0\1\111"+
    "\4\0\1\112\54\0\1\60\7\0\1\113\27\0\1\114"+
    "\53\0\1\60\7\0\1\115\3\0\1\116\3\0\1\117"+
    "\11\0\1\120\5\0\1\121\53\0\1\60\34\0\1\122"+
    "\7\0\1\123\46\0\1\60\34\0\1\124\5\0\1\125"+
    "\50\0\1\60\37\0\1\126\53\0\1\60\31\0\1\127"+
    "\61\0\1\60\32\0\1\130\60\0\1\60\16\0\1\131"+
    "\13\0\1\132\4\0\1\133\7\0\1\134\43\0\1\60"+
    "\1\135\135\0\1\136\100\0\1\137\23\0\1\140\35\0"+
    "\1\141\52\0\1\142\62\0\1\60\41\0\1\143\51\0"+
    "\1\60\31\0\1\144\3\0\1\145\23\0\1\146\31\0"+
    "\1\60\33\0\1\147\10\0\1\150\2\0\1\151\43\0"+
    "\1\60\47\0\1\152\43\0\1\60\31\0\1\153\15\0"+
    "\1\154\27\0\1\4\14\0\1\155\63\0\1\4\4\0"+
    "\2\4\102\0\1\20\14\0\1\156\17\0\20\156\7\0"+
    "\33\156\3\0\2\156\11\0\1\157\106\0\20\70\1\0"+
    "\73\70\23\0\1\160\144\0\1\161\65\0\1\162\24\0"+
    "\1\163\1\164\123\0\1\165\104\0\1\166\64\0\1\167"+
    "\137\0\1\170\120\0\1\171\117\0\1\172\103\0\1\173"+
    "\110\0\1\174\113\0\1\175\117\0\1\176\122\0\1\177"+
    "\56\0\1\200\136\0\1\201\1\202\1\0\1\203\2\0"+
    "\1\204\5\0\1\205\121\0\1\206\47\0\1\207\141\0"+
    "\1\210\61\0\1\211\123\0\1\212\104\0\1\213\140\0"+
    "\1\214\15\0\1\215\112\0\1\216\2\0\1\217\53\0"+
    "\1\220\1\0\1\221\142\0\1\222\106\0\1\223\1\224"+
    "\117\0\1\225\107\0\1\226\124\0\1\227\103\0\1\230"+
    "\66\0\1\231\137\0\1\232\120\0\1\233\103\0\1\234"+
    "\100\0\1\235\114\0\1\236\57\0\1\237\113\0\1\240"+
    "\113\0\1\241\155\0\1\242\121\0\1\243\112\0\1\244"+
    "\122\0\1\245\116\0\1\246\112\0\1\247\103\0\1\250"+
    "\1\251\125\0\1\252\73\0\1\253\116\0\1\254\112\0"+
    "\1\255\101\0\1\235\42\0\1\235\12\0\1\256\100\0"+
    "\1\256\4\0\2\256\67\0\1\257\61\0\1\260\102\0"+
    "\1\261\161\0\1\262\75\0\1\263\70\0\1\160\143\0"+
    "\1\264\121\0\1\265\113\0\1\266\113\0\1\267\100\0"+
    "\1\270\124\0\1\271\106\0\1\272\105\0\1\273\100\0"+
    "\1\160\130\0\1\274\123\0\1\275\117\0\1\276\101\0"+
    "\1\277\113\0\1\300\117\0\1\301\57\0\1\302\151\0"+
    "\1\161\67\0\1\303\111\0\1\304\100\0\1\305\142\0"+
    "\1\306\120\0\1\307\126\0\1\310\103\0\1\311\103\0"+
    "\1\312\124\0\1\313\102\0\1\314\143\0\1\315\76\0"+
    "\1\123\102\0\1\316\112\0\1\317\116\0\1\320\107\0"+
    "\1\321\71\0\1\71\137\0\1\72\125\0\1\322\114\0"+
    "\1\323\135\0\1\324\112\0\1\325\116\0\1\326\53\0"+
    "\1\327\64\0\1\330\146\0\1\331\110\0\1\332\137\0"+
    "\1\333\112\0\1\334\72\0\1\335\110\0\1\336\125\0"+
    "\1\337\100\0\1\340\126\0\1\341\32\0\1\256\3\0"+
    "\1\342\74\0\1\256\4\0\2\256\56\0\1\343\112\0"+
    "\1\344\126\0\1\345\75\0\1\346\116\0\1\347\117\0"+
    "\1\350\106\0\1\351\112\0\1\352\130\0\1\353\101\0"+
    "\1\354\111\0\1\355\62\0\1\356\165\0\1\357\73\0"+
    "\1\360\72\0\1\361\144\0\1\362\113\0\1\363\102\0"+
    "\1\364\115\0\1\365\64\0\1\77\111\0\1\366\125\0"+
    "\1\367\116\0\1\110\127\0\1\370\112\0\1\371\111\0"+
    "\1\372\117\0\1\373\107\0\1\374\124\0\1\375\114\0"+
    "\1\376\116\0\1\377\101\0\1\u0100\107\0\1\u0101\66\0"+
    "\1\u0102\142\0\1\u0103\105\0\1\u0104\75\0\1\u0105\131\0"+
    "\1\u0106\117\0\1\u0107\131\0\1\u0108\100\0\1\u0109\123\0"+
    "\1\352\102\0\1\u010a\113\0\1\u010b\111\0\1\u010c\120\0"+
    "\1\u010d\135\0\1\u010e\77\0\1\u010f\112\0\1\u0110\106\0"+
    "\1\u0111\113\0\1\223\107\0\1\u0112\125\0\1\u0113\123\0"+
    "\1\266\70\0\1\u0114\125\0\1\u0115\101\0\1\u0116\126\0"+
    "\1\u0117\113\0\1\u0118\103\0\1\u0119\112\0\1\u011a\115\0"+
    "\1\u011b\112\0\1\u011c\113\0\1\161\115\0\1\u011d\111\0"+
    "\1\u011e\63\0\1\u011f\111\0\1\u0120\130\0\1\160\125\0"+
    "\1\u0121\113\0\1\u0122\113\0\1\161\114\0\1\u0123\112\0"+
    "\1\u0124\115\0\1\u0125\111\0\1\u0126\113\0\1\u0127\113\0"+
    "\1\u0128\115\0\1\362\117\0\1\u0129\111\0\1\u012a\53\0"+
    "\1\u012b\104\0\1\u012c\157\0\1\u012d\135\0\1\161\113\0"+
    "\1\u012e\74\0\1\u012e\124\0\1\u012f\113\0\1\u0130\100\0"+
    "\1\u0131\111\0\1\u0132\121\0\1\u0133\106\0\1\u0127\71\0"+
    "\1\u0134\134\0\1\u0135\126\0\1\u0136\130\0\1\u0137\100\0"+
    "\1\u0138\132\0\1\u0139\64\0\1\u013a\107\0\1\u013b\127\0"+
    "\1\u013c\121\0\1\u013d\76\0\1\u013e\75\0\1\367\77\0"+
    "\1\u013f\137\0\1\u0140\117\0\1\u0141\113\0\1\u0142\121\0"+
    "\1\u0127\60\0\1\u0143\127\0\1\u0144\157\0\1\u0145\55\0"+
    "\1\u0135\112\0\1\u0130\117\0\1\u0146\110\0\1\u0147\124\0"+
    "\1\u010e\104\0\1\u0135\110\0\1\u0148\113\0\1\u0149\131\0"+
    "\1\u014a\110\0\1\u014b\135\0\1\u014c\64\0\1\u014d\134\0"+
    "\1\u0127\70\0\1\u014e\125\0\1\u014f\62\0\1\u0150\134\0"+
    "\1\u0151\105\0\1\u0152\113\0\1\u0153\120\0\1\u0154\146\0"+
    "\1\u0155\47\0\1\u0156\117\0\1\u0157\120\0\1\u0158\107\0"+
    "\1\u0159\115\0\1\u015a\115\0\1\u015b\106\0\1\u015c\121\0"+
    "\1\u015d\110\0\1\u015e\110\0\1\u015f\114\0\1\u0160\112\0"+
    "\1\u0161\116\0\1\u0162\133\0\1\u0163\25\0\1\u0164\151\0"+
    "\1\u0165\132\0\1\u0130\137\0\1\357\57\0\1\u0166\115\0"+
    "\1\u0167\111\0\1\u015d\125\0\1\u0168\106\0\1\u0169\116\0"+
    "\1\u0135\103\0\1\u016a\130\0\1\u016b\103\0\1\u016c\114\0"+
    "\1\u016b\144\0\1\u016d\112\0\1\u016e\57\0\1\u016f\107\0"+
    "\1\u0170\123\0\1\u0171\116\0\1\u0116\104\0\1\u0172\113\0"+
    "\1\u0173\103\0\1\u0174\54\0\1\u0175\163\0\1\u0176\111\0"+
    "\1\u0177\115\0\1\u0178\147\0\1\u0179\60\0\1\u017a\111\0"+
    "\1\u0127\120\0\1\u017b\76\0\1\u017c\122\0\1\u017d\117\0"+
    "\1\u017e\114\0\1\u017f\110\0\1\u0180\117\0\1\u0181\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25536];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\4\1\1\11"+
    "\2\1\1\11\23\1\3\11\11\1\3\0\5\11\1\1"+
    "\2\0\1\11\46\0\1\1\13\0\1\11\1\0\2\11"+
    "\51\0\1\1\1\0\2\11\3\0\1\11\32\0\1\1"+
    "\5\0\1\1\15\0\1\11\1\0\1\11\16\0\1\11"+
    "\11\0\1\11\31\0\2\11\6\0\1\11\5\0\1\11"+
    "\1\0\1\11\12\0\1\11\5\0\2\11\1\0\1\11"+
    "\5\0\1\11\4\0\1\11\12\0\1\11\21\0\2\11"+
    "\11\0\1\11\11\0\1\11\12\0\3\11\6\0\2\11"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { lexeme = yytext(); return relacionamento;
          }
        case 56: break;
        case 18: 
          { lexeme = yytext(); return atribuicao_func;
          }
        case 57: break;
        case 22: 
          { lexeme = yytext(); return tipo_atributo;
          }
        case 58: break;
        case 55: 
          { lexeme = yytext(); return number_relationship;
          }
        case 59: break;
        case 49: 
          { lexeme = yytext(); return concurrent;
          }
        case 60: break;
        case 16: 
          { lexeme = yytext(); return criacao_de_classe;
          }
        case 61: break;
        case 19: 
          { lexeme = yytext(); return final_linha;
          }
        case 62: break;
        case 8: 
          { lexeme = yytext(); return quebra_linha;
          }
        case 63: break;
        case 51: 
          { lexeme = yytext(); return define_const;
          }
        case 64: break;
        case 46: 
          { lexeme = yytext(); return on_delete;
          }
        case 65: break;
        case 34: 
          { lexeme = yytext(); return multiplicidade;
          }
        case 66: break;
        case 23: 
          { lexeme = yytext(); return atributos_da_classe;
          }
        case 67: break;
        case 25: 
          { lexeme = yytext(); return retorno;
          }
        case 68: break;
        case 32: 
          { lexeme = yytext(); return func;
          }
        case 69: break;
        case 36: 
          { lexeme = yytext(); return propriedades_operacoes;
          }
        case 70: break;
        case 35: 
          { lexeme = yytext(); return enquanto;
          }
        case 71: break;
        case 42: 
          { lexeme = yytext(); return format;
          }
        case 72: break;
        case 10: 
          { lexeme = yytext(); return abre_colchete;
          }
        case 73: break;
        case 31: 
          { lexeme = yytext(); return senao;
          }
        case 74: break;
        case 54: 
          { lexeme = yytext(); return variavel;
          }
        case 75: break;
        case 53: 
          { lexeme = yytext(); return relationship;
          }
        case 76: break;
        case 3: 
          { lexeme=yytext(); return numero;
          }
        case 77: break;
        case 47: 
          { lexeme = yytext(); return on_update;
          }
        case 78: break;
        case 15: 
          { lexeme = yytext(); return espaco;
          }
        case 79: break;
        case 40: 
          { lexeme = yytext(); return associacoes_atributos;
          }
        case 80: break;
        case 7: 
          { lexeme = yytext(); return relacional;
          }
        case 81: break;
        case 48: 
          { lexeme = yytext(); return relacionamentos_classes;
          }
        case 82: break;
        case 41: 
          { lexeme = yytext(); return alterar_metodo;
          }
        case 83: break;
        case 39: 
          { lexeme = yytext(); return excluir_metodo;
          }
        case 84: break;
        case 4: 
          { lexeme = yytext(); return abre_parenteses;
          }
        case 85: break;
        case 26: 
          { lexeme = yytext(); return para;
          }
        case 86: break;
        case 6: 
          { lexeme = yytext(); return fecha_parenteses;
          }
        case 87: break;
        case 29: 
          { lexeme = yytext(); return retorno_metodo;
          }
        case 88: break;
        case 13: 
          { lexeme = yytext(); return fecha_chave;
          }
        case 89: break;
        case 45: 
          { lexeme = yytext(); return enquanto_for;
          }
        case 90: break;
        case 14: 
          { lexeme = yytext(); return inicio_funcao;
          }
        case 91: break;
        case 28: 
          { lexeme = yytext(); return final_linha_classe;
          }
        case 92: break;
        case 12: 
          { lexeme = yytext(); return abre_chave;
          }
        case 93: break;
        case 21: 
          { lexeme = yytext(); return se;
          }
        case 94: break;
        case 5: 
          { lexeme = yytext(); return oparitmetico;
          }
        case 95: break;
        case 44: 
          { lexeme = yytext(); return opcoes_fk;
          }
        case 96: break;
        case 43: 
          { lexeme = yytext(); return atributos_visibilidade;
          }
        case 97: break;
        case 24: 
          { lexeme = yytext(); return tipos;
          }
        case 98: break;
        case 11: 
          { lexeme = yytext(); return fecha_colchete;
          }
        case 99: break;
        case 38: 
          { lexeme = yytext(); return shape;
          }
        case 100: break;
        case 9: 
          { lexeme = yytext(); return virgula;
          }
        case 101: break;
        case 37: 
          { lexeme = yytext(); return classe;
          }
        case 102: break;
        case 52: 
          { lexeme = yytext(); return constante;
          }
        case 103: break;
        case 1: 
          { return ERROR;
          }
        case 104: break;
        case 2: 
          { lexeme = yytext(); return letra;
          }
        case 105: break;
        case 33: 
          { lexeme = yytext(); return criar_metodo;
          }
        case 106: break;
        case 17: 
          { lexeme = yytext(); return atribuicao_classe;
          }
        case 107: break;
        case 20: 
          { /*Ignore*/
          }
        case 108: break;
        case 50: 
          { lexeme = yytext(); return navegabilidade;
          }
        case 109: break;
        case 30: 
          { lexeme = yytext(); return ler_metodo;
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
