/* The following code was generated by JFlex 1.4.3 on 16/06/21 21:50 */

package AnalisadorSintatico;

import static AnalisadorLexico.Token.*;
import java_cup.runtime.Symbol;
import AnalisadorSintatico.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/06/21 21:50 from the specification file
 * <tt>D:/Documentos/NetBeansProjects/Analisador_Diagrama_de_Classes/src/AnalisadorSintatico/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    50,  0,  0, 12, 12,  0,  4,  0,  6,  8,  0,  9, 23,  7,  0, 21, 
    47, 42,  2,  2,  2,  2,  2,  2,  2, 48, 28, 22, 14, 11, 13,  0, 
     0, 17,  1,  1,  1,  1,  1, 41,  1,  1,  1,  1, 19, 20,  1,  1, 
     1,  1, 18,  1, 16,  1,  1,  1,  1,  1, 46, 24, 49, 25, 10, 15, 
     0, 31,  1,  1,  1, 29, 38, 39, 36, 34,  1,  1, 30,  1, 32, 35, 
     1, 40, 37,  1, 33,  1,  1,  1,  1,  1, 45, 26,  0, 27,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0, 12,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0, 44,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\3\1\1\7\1\1\2\2\2\1\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\2\1\3\1\1\1\16"+
    "\2\0\1\17\1\20\1\17\1\21\1\22\1\2\1\0"+
    "\1\23\3\0\1\24\1\2\1\0\1\25\2\0\1\17"+
    "\1\2\1\0\1\26\2\0\1\27\1\2\1\3\1\2"+
    "\3\0\2\2\2\0\1\30\2\2\2\0\1\2\3\0"+
    "\1\2\3\0\1\2\20\0\1\31\1\32\5\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\377\0\u0132"+
    "\0\63\0\u0165\0\u0198\0\u01cb\0\63\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\314\0\u02fd\0\63\0\63\0\63\0\u0330"+
    "\0\u0363\0\u0396\0\u03c9\0\314\0\u03fc\0\u042f\0\u0462\0\63"+
    "\0\u0495\0\63\0\63\0\u04c8\0\u04fb\0\63\0\u052e\0\u0561"+
    "\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\63"+
    "\0\u06f9\0\u072c\0\63\0\u075f\0\u0792\0\63\0\u07c5\0\63"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\63\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\63\0\63"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\2\1\16\2\3"+
    "\1\17\2\3\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\14\3\1\31\1\32\2\2\2\3"+
    "\2\4\1\33\1\34\64\0\1\3\15\0\6\3\10\0"+
    "\15\3\3\0\2\3\6\0\1\4\47\0\1\4\4\0"+
    "\2\4\6\0\1\35\65\0\1\36\62\0\1\37\5\0"+
    "\1\40\56\0\1\37\64\0\1\41\64\0\1\42\54\0"+
    "\1\43\54\0\1\3\15\0\6\3\10\0\12\3\1\44"+
    "\2\3\3\0\2\3\5\0\1\3\2\0\1\45\12\0"+
    "\6\3\10\0\15\3\3\0\2\3\32\0\1\46\62\0"+
    "\1\47\73\0\1\50\17\0\1\51\37\0\1\52\27\0"+
    "\1\3\15\0\6\3\10\0\1\53\14\3\3\0\2\3"+
    "\6\0\1\4\1\0\1\54\45\0\1\4\4\0\2\4"+
    "\52\0\1\6\16\0\1\55\60\0\1\56\47\0\1\56"+
    "\4\0\2\56\14\0\1\57\62\0\1\60\51\0\1\3"+
    "\15\0\6\3\10\0\10\3\1\61\4\3\3\0\2\3"+
    "\30\0\1\62\64\0\1\63\43\0\1\64\62\0\1\65"+
    "\107\0\1\66\27\0\1\3\15\0\6\3\10\0\3\3"+
    "\1\67\11\3\3\0\2\3\30\0\1\62\25\0\1\62"+
    "\10\0\5\55\1\0\55\55\2\0\1\56\5\0\1\70"+
    "\41\0\1\56\4\0\2\56\15\0\1\60\50\0\1\3"+
    "\15\0\6\3\10\0\1\71\14\3\3\0\2\3\27\0"+
    "\1\72\114\0\1\73\65\0\1\74\3\0\1\3\15\0"+
    "\6\3\10\0\1\75\14\3\3\0\2\3\5\0\1\3"+
    "\15\0\6\3\10\0\12\3\1\76\2\3\3\0\2\3"+
    "\41\0\1\77\46\0\1\100\72\0\1\101\32\0\1\3"+
    "\15\0\6\3\10\0\10\3\1\102\4\3\3\0\2\3"+
    "\5\0\1\3\15\0\6\3\10\0\2\3\1\103\12\3"+
    "\3\0\2\3\52\0\1\104\23\0\1\105\54\0\1\3"+
    "\15\0\6\3\10\0\2\3\1\106\12\3\3\0\2\3"+
    "\5\0\1\3\15\0\6\3\10\0\15\3\1\0\1\107"+
    "\1\0\2\3\45\0\1\110\77\0\1\111\5\0\1\3"+
    "\15\0\6\3\10\0\1\3\1\112\13\3\3\0\2\3"+
    "\60\0\1\113\26\0\1\114\61\0\1\115\44\0\1\3"+
    "\15\0\6\3\10\0\5\3\1\116\7\3\3\0\2\3"+
    "\47\0\1\117\62\0\1\120\50\0\1\121\32\0\1\3"+
    "\15\0\6\3\10\0\15\3\3\0\1\76\1\3\27\0"+
    "\1\122\61\0\1\123\70\0\1\124\67\0\1\125\67\0"+
    "\1\126\77\0\1\127\51\0\1\130\63\0\1\131\22\0"+
    "\1\132\114\0\1\133\65\0\1\134\76\0\1\135\22\0"+
    "\1\136\103\0\1\137\52\0\1\140\74\0\1\141\41\0"+
    "\1\142\102\0\1\143\67\0\1\144\57\0\1\145\57\0"+
    "\1\146\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4182];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\3\1\1\11"+
    "\7\1\3\11\5\1\2\0\1\1\1\11\1\1\2\11"+
    "\1\1\1\0\1\11\3\0\2\1\1\0\1\1\2\0"+
    "\1\11\1\1\1\0\1\11\2\0\1\11\1\1\1\11"+
    "\1\1\3\0\2\1\2\0\1\11\2\1\2\0\1\1"+
    "\3\0\1\1\3\0\1\1\20\0\2\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 28: break;
        case 20: 
          { return new Symbol(sym.tipo_atributo, yychar, yyline, yytext());
          }
        case 29: break;
        case 14: 
          { return new Symbol(sym.espaco, yychar, yyline, yytext());
          }
        case 30: break;
        case 24: 
          { return new Symbol(sym.multiplicidade, yychar, yyline, yytext());
          }
        case 31: break;
        case 7: 
          { return new Symbol(sym.oparitmetico, yychar, yyline, yytext());
          }
        case 32: break;
        case 26: 
          { return new Symbol(sym.variavel, yychar, yyline, yytext());
          }
        case 33: break;
        case 27: 
          { return new Symbol(sym.relacionamentos_classes, yychar, yyline, yytext());
          }
        case 34: break;
        case 22: 
          { return new Symbol(sym.final_linha_classe, yychar, yyline, yytext());
          }
        case 35: break;
        case 8: 
          { return new Symbol(sym.virgula, yychar, yyline, yytext());
          }
        case 36: break;
        case 16: 
          { return new Symbol(sym.criacao_de_classe, yychar, yyline, yytext());
          }
        case 37: break;
        case 19: 
          { return new Symbol(sym.final_linha, yychar, yyline, yytext());
          }
        case 38: break;
        case 4: 
          { return new Symbol(sym.quebra_linha, yychar, yyline, yytext());
          }
        case 39: break;
        case 13: 
          { return new Symbol(sym.inicio_funcao, yychar, yyline, yytext());
          }
        case 40: break;
        case 23: 
          { return new Symbol(sym.retorno_metodo, yychar, yyline, yytext());
          }
        case 41: break;
        case 2: 
          { return new Symbol(sym.letra, yychar, yyline, yytext());
          }
        case 42: break;
        case 25: 
          { return new Symbol(sym.relacionamento, yychar, yyline, yytext());
          }
        case 43: break;
        case 15: 
          { return new Symbol(sym.relacional, yychar, yyline, yytext());
          }
        case 44: break;
        case 10: 
          { return new Symbol(sym.fecha_colchete, yychar, yyline, yytext());
          }
        case 45: break;
        case 3: 
          { return new Symbol(sym.numero, yychar, yyline, yytext());
          }
        case 46: break;
        case 11: 
          { return new Symbol(sym.abre_chave, yychar, yyline, yytext());
          }
        case 47: break;
        case 17: 
          { return new Symbol(sym.atribuicao_func, yychar, yyline, yytext());
          }
        case 48: break;
        case 6: 
          { return new Symbol(sym.fecha_parenteses, yychar, yyline, yytext());
          }
        case 49: break;
        case 5: 
          { return new Symbol(sym.abre_parenteses, yychar, yyline, yytext());
          }
        case 50: break;
        case 12: 
          { return new Symbol(sym.fecha_chave, yychar, yyline, yytext());
          }
        case 51: break;
        case 9: 
          { return new Symbol(sym.abre_colchete, yychar, yyline, yytext());
          }
        case 52: break;
        case 21: 
          { /*Ignore*/
          }
        case 53: break;
        case 18: 
          { return new Symbol(sym.atribuicao_classe, yychar, yyline, yytext());
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return new Symbol (sym.EOF, new String("Fim do arquivo"));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
